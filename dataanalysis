__author__ = 'patrickwedgeworth'  

import plotly.plotly as py
from plotly.graph_objs import *
import pandas as pd
import matplotlib
from statsmodels import api as sm
import pylab as pl
import numpy as np
from scipy.stats.stats import pearsonr
import scipy.stats as st

# read the data in"
df = pd.read_csv("/Users/patrickwedgeworth/Desktop/Mankoffdev/ProfByte1/Project1/output_median(1).csv")

# take a look at the dataset
print df.head()


# rename the columns
df.columns = ["Zip","Provider","Expenditures","OP_6","OP_7","SCIP_INF_3","SCIP_CARD_2","SCIP_VTE_2","SCIP_INF_9","PN_6","HF_1","HF_2","IMM_2","Median"]
print df.columns

# summarize the data
print df.describe()
 
# take a look at the standard deviation of each column
print df.std()


print len(df["HF_1"])
print len(df["Provider"])

#create and populate arrays that show whether the hospital @ index meets the 
#standard (1) or not (0)
HF_1_scorearray = []
HF_1_indexarray = []
HF_2_scorearray = []
HF_2_indexarray = []
IMM_2_indexarray = []
IMM_2_scorearray = []
OP_6_indexarray = []
OP_6_scorearray = []
OP_7_indexarray = []
OP_7_scorearray = []
PN_6_indexarray = []
PN_6_scorearray = []
SCIP_CARD_2_indexarray = []
SCIP_CARD_2_scorearray = []
SCIP_INF_3_indexarray = []
SCIP_INF_3_scorearray = []
SCIP_INF_9_indexarray = []
SCIP_INF_9_scorearray = []
SCIP_VTE_2_indexarray = []
SCIP_VTE_2_scorearray = []

binY = []
binN = []
medianbinY = []
medianbinN = []

HF_1_binY = []
HF_1_binN = []
HF_1_medianbinY = []
HF_1_medianbinN = []

#return to HF2... potentially interesting, but too few samples!
HF_2_binY = []
HF_2_binN = []
HF_2_medianbinY = []
HF_2_medianbinN = []

IMM_2_binY = []
IMM_2_binN = []
IMM_2_medianbinY = []
IMM_2_medianbinN = []

OP_6_binY = []
OP_6_binN = []
OP_6_medianbinY = []
OP_6_medianbinN = []

OP_7_binY = []
OP_7_binN = []
OP_7_medianbinY = []
OP_7_medianbinN = []

PN_6_binY = []
PN_6_binN = []
PN_6_medianbinY = []
PN_6_medianbinN = []

SCIP_CARD_2_binY = []
SCIP_CARD_2_binN = []
SCIP_CARD_2_medianbinY = []
SCIP_CARD_2_medianbinN = []

SCIP_INF_3_binY = []
SCIP_INF_3_binN = []
SCIP_INF_3_medianbinY = []
SCIP_INF_3_medianbinN = []

SCIP_INF_9_binY = []
SCIP_INF_9_binN = []
SCIP_INF_9_medianbinY = []
SCIP_INF_9_medianbinN = []

SCIP_VTE_2_binY = []
SCIP_VTE_2_binN = []
SCIP_VTE_2_medianbinY = []
SCIP_VTE_2_medianbinN = []

percent_binY = []
percent_binN = []
percent_medianbinY = []
percent_medianbinN = []

finalscorearray = []
finalmeanarray = []

finalratioarray = []

#create arrays for whether a hospital has 90% quality or more for a particular measure
for index in range(len(df["Provider"])):
    HF_1_indexarray.extend([df["HF_1"][index]])
    if df["HF_1"][index] > 90:
        HF_1_scorearray.extend([1])
    else:
        HF_1_scorearray.extend([0])
        
    HF_2_indexarray.extend([df["HF_2"][index]])
    if df["HF_2"][index] > 90:
        HF_2_scorearray.extend([1])
    else:
        HF_2_scorearray.extend([0])
        
    IMM_2_indexarray.extend([df["IMM_2"][index]])
    if df["IMM_2"][index] > 90:
        IMM_2_scorearray.extend([1])
    else:
        IMM_2_scorearray.extend([0])
        
    OP_6_indexarray.extend([df["OP_6"][index]])
    if df["OP_6"][index] > 90:
        OP_6_scorearray.extend([1])
    else:
        OP_6_scorearray.extend([0])
        
    OP_7_indexarray.extend([df["OP_7"][index]])
    if df["OP_7"][index] > 90:
        OP_7_scorearray.extend([1])
    else:
        OP_7_scorearray.extend([0])

    PN_6_indexarray.extend([df["PN_6"][index]])  
    if df["PN_6"][index] > 90:
        PN_6_scorearray.extend([1])
    else:
        PN_6_scorearray.extend([0])
        
    SCIP_CARD_2_indexarray.extend([df["SCIP_CARD_2"][index]])
    if df["SCIP_CARD_2"][index] > 90:
        SCIP_CARD_2_scorearray.extend([1])
    else: 
        SCIP_CARD_2_scorearray.extend([0])
        
    SCIP_INF_3_indexarray.extend([df["SCIP_INF_3"][index]])
    if df["SCIP_INF_3"][index] > 90:
        SCIP_INF_3_scorearray.extend([1])
    else:
        SCIP_INF_3_scorearray.extend([0])
        
    SCIP_INF_9_indexarray.extend([df["SCIP_INF_9"][index]])
    if df["SCIP_INF_9"][index] > 90:
        SCIP_INF_9_scorearray.extend([1])
    else:
        SCIP_INF_9_scorearray.extend([0])
    
    SCIP_VTE_2_indexarray.extend([df["SCIP_VTE_2"][index]])
    if df["SCIP_VTE_2"][index] > 90:
        SCIP_VTE_2_scorearray.extend([1])
    else:
        SCIP_VTE_2_scorearray.extend([0])
    
    #Calculate a final score based on whether the hospital meets 90% or more for each of the measures
    scoreval = HF_1_scorearray[index]+HF_2_scorearray[index]+IMM_2_scorearray[index]+OP_6_scorearray[index]+OP_7_scorearray[index]+PN_6_scorearray[index]+SCIP_CARD_2_scorearray[index]+SCIP_INF_3_scorearray[index]+SCIP_INF_9_scorearray[index]+SCIP_VTE_2_scorearray[index]
    finalscorearray.extend([scoreval])

    #Create an array that contains the average score for each hospital
    finalpercentarray = [df["HF_1"][index], df["HF_2"][index], df["IMM_2"][index], df["OP_6"][index], df["OP_7"][index], df["PN_6"][index], df["SCIP_CARD_2"][index], df["SCIP_INF_3"][index],df["SCIP_INF_9"][index], df["SCIP_VTE_2"][index]]
    finalmeanarray.extend([np.mean(finalpercentarray)])


    #Divid hospitals into those that meet the quality measures for the award and those that don't
    if scoreval == 10 and finalmeanarray[index] > 96:
        binY.extend([df["Expenditures"][index]])
        medianbinY.extend([df["Median"][index]])
    else:
        binN.extend([df["Expenditures"][index]])
        medianbinN.extend([df["Median"][index]])

    #for further explanation, divide hospitals into two groups based on whether they met each of the individual criteria 
    if HF_1_scorearray[index] == 1:
        HF_1_binY.extend([df["Expenditures"][index]])
        HF_1_medianbinY.extend([df["Median"][index]])
    else:
        HF_1_binN.extend([df["Expenditures"][index]])
        HF_1_medianbinN.extend([df["Median"][index]])

    if HF_2_scorearray[index] == 1:
        HF_2_binY.extend([df["Expenditures"][index]])
        HF_2_medianbinY.extend([df["Median"][index]])
    else:
        HF_2_binN.extend([df["Expenditures"][index]])
        HF_2_medianbinN.extend([df["Median"][index]])

    if IMM_2_scorearray[index] == 1:
        IMM_2_binY.extend([df["Expenditures"][index]])
        IMM_2_medianbinY.extend([df["Median"][index]])
    else:
        IMM_2_binN.extend([df["Expenditures"][index]])
        IMM_2_medianbinN.extend([df["Median"][index]])

    if OP_6_scorearray[index] == 1:
        OP_6_binY.extend([df["Expenditures"][index]])
        OP_6_medianbinY.extend([df["Median"][index]])
    else:
        OP_6_binN.extend([df["Expenditures"][index]])
        OP_6_medianbinN.extend([df["Median"][index]])
    if OP_7_scorearray[index] == 1:
        OP_7_binY.extend([df["Expenditures"][index]])
        OP_7_medianbinY.extend([df["Median"][index]])
    else:
        OP_7_binN.extend([df["Expenditures"][index]])
        OP_7_medianbinN.extend([df["Median"][index]])
    if PN_6_scorearray[index] == 1:
        PN_6_binY.extend([df["Expenditures"][index]])
        PN_6_medianbinY.extend([df["Median"][index]])
    else:
        PN_6_binN.extend([df["Expenditures"][index]])
        PN_6_medianbinN.extend([df["Median"][index]])
    if SCIP_CARD_2_scorearray[index] == 1:
        SCIP_CARD_2_binY.extend([df["Expenditures"][index]])
        SCIP_CARD_2_medianbinY.extend([df["Median"][index]])
    else:
        SCIP_CARD_2_binN.extend([df["Expenditures"][index]])
        SCIP_CARD_2_medianbinN.extend([df["Median"][index]])
    if SCIP_INF_3_scorearray[index] == 1:
        SCIP_INF_3_binY.extend([df["Expenditures"][index]])
        SCIP_INF_3_medianbinY.extend([df["Median"][index]])
    else:
        SCIP_INF_3_binN.extend([df["Expenditures"][index]])
        SCIP_INF_3_medianbinN.extend([df["Median"][index]])
    if SCIP_INF_9_scorearray[index] == 1:
        SCIP_INF_9_binY.extend([df["Expenditures"][index]])
        SCIP_INF_9_medianbinY.extend([df["Median"][index]])
    else:
        SCIP_INF_9_binN.extend([df["Expenditures"][index]])
        SCIP_INF_9_medianbinN.extend([df["Median"][index]])
    if SCIP_VTE_2_scorearray[index] == 1:
        SCIP_VTE_2_binY.extend([df["Expenditures"][index]])
        SCIP_VTE_2_medianbinY.extend([df["Median"][index]])
    else:
        SCIP_VTE_2_binN.extend([df["Expenditures"][index]])
        SCIP_VTE_2_medianbinN.extend([df["Median"][index]])
    if finalmeanarray[index] > 96:
        percent_binY.extend([df["Expenditures"][index]])
        percent_medianbinY.extend([df["Median"][index]])
    else:
        percent_binN.extend([df["Expenditures"][index]])
        percent_medianbinN.extend([df["Median"][index]])
            
    finalpercentarray = [df["HF_1"][index], df["HF_2"][index], df["IMM_2"][index], df["OP_6"][index], df["OP_7"][index], df["PN_6"][index], df["SCIP_CARD_2"][index], df["SCIP_INF_3"][index],df["SCIP_INF_9"][index], df["SCIP_VTE_2"][index]]
    finalmeanarray.extend([np.mean(finalpercentarray)])

    finalratioarray.extend(np.mean(finalpercentarray)/[df["Expenditures"][index]])



    

#Code for plotting histograms based on various permutations of data.  Change x0, x1, x2 based on what you want to explore

x0 = percent_binY
x1 = percent_binN
x2 = finalmeanarray

stuff = np.random.randn(500)
stuff2 = np.random.randn(500)

#code to print results of t-test.  Only use on normally distributed data!
print st.ttest_ind(binY,binN,equal_var=False)
print st.ttest_ind(stuff,stuff2)

#code for overlapping histogram
'''Good_Quality= Histogram(
    x=x0,
    opacity=0.75,
    name='Good Quality'
)
Low_Quality = Histogram(
    x=x1,
    opacity=0.75,
    name='Low Quality'
)
data = Data([Good_Quality, Low_Quality])
layout = Layout(
    title='Hospital Spending Histogram',
    barmode='stack'
)
fig = Figure(data=data, layout=layout)
plot_url = py.plot(fig, filename='exploration')'''

#code for normal histogram
hist= Histogram(
    x=x2,
    opacity=0.75,
    name='Good Quality'
)
data = Data([hist])
layout = Layout(
    title='Hospital Spending Histogram',
)
fig = Figure(data=data, layout=layout)
plot_url = py.plot(fig, filename='exploration2')






